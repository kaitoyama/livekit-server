// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// ルームでの発言権限を変更
	// (PATCH /rooms/{roomId}/participants)
	ChangeParticipantRole(ctx echo.Context, roomId openapi_types.UUID) error
	// サウンドボード用の音声一覧を取得
	// (GET /soundboard)
	GetSoundboardList(ctx echo.Context) error
	// サウンドボード用の短い音声ファイルをアップロード
	// (POST /soundboard)
	PostSoundboard(ctx echo.Context) error
	// アップロード済み音声を LiveKit ルームで再生
	// (POST /soundboard/play)
	PostSoundboardPlay(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// ChangeParticipantRole converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeParticipantRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangeParticipantRole(ctx, roomId)
	return err
}

// GetSoundboardList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundboardList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSoundboardList(ctx)
	return err
}

// PostSoundboard converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboard(ctx)
	return err
}

// PostSoundboardPlay converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboardPlay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboardPlay(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// ------------- Optional query parameter "isWebinar" -------------

	err = runtime.BindQueryParameter("form", true, false, "isWebinar", ctx.QueryParams(), &params.IsWebinar)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isWebinar: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.PATCH(baseURL+"/rooms/:roomId/participants", wrapper.ChangeParticipantRole)
	router.GET(baseURL+"/soundboard", wrapper.GetSoundboardList)
	router.POST(baseURL+"/soundboard", wrapper.PostSoundboard)
	router.POST(baseURL+"/soundboard/play", wrapper.PostSoundboardPlay)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
