// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWUU8bxxb+K6u59yGRHGxucl8sVVWipBFN1VJCxEOLmmU94Anenc3smIQiS551IICJ",
	"IJRCoEkISQoOCKdR2oiQCH7MYW3zL6qZXZs1XkOq9AUt6zlnzvm+73xnx5BBTZta2OIOSo4hx0hjU1eP",
	"3TrjxCC2bnH5bwo7BiM2J9RCSQSFLSh8hMIzb2IcRNmbdb3pZ7X8+MFOvra+gWLIZtTGjBOscpEUtjjh",
	"o1GJ1mUi9x0UPnZd/qlHt1LUvHGj6zKKIT5qY5REDmfEGkK5GLpFiYVTFyPq8QsAsQRitbLsepMfUAwN",
	"UmbqHCVRSuf4HCcmjkpq6SZuTVhbK1Vf7npzD1pDco03dOAWNrhM0kOp2Ud4OgSaarwZBvvYr4RjUz38",
	"l+FBlET/iR+xEQ+oiId5OLpaZ0wflf8zSs2u1AkMgSgrNBtoZLMkFdkVw7ezhOEUSv5QTxtrrrm/pXUZ",
	"R6xBKgswqMV1Q7Hjg4oyZAQPE37OwWwEMxRDWZZBSZTm3HaS8fgQ4ensQIdBzbhNhnUjnU2c70zEj0Xl",
	"Yi2tTSrNvIbC2+rybm1tBsQmiFdBHIgdEOXKq2JlZ00qwp0HsQxuEQpPwX2pwrbB/Uuh8wu47yUWhGdk",
	"vZzp32smMRiVdxMDa4OUaUFeFEMjmDl+DZ0diY6ELI3a2NJtgpLofEei47xCjKcVq3FbIpscQ0NYgSKl",
	"oMseJF+om1hD1+u4MOzY1HJ8mfwvkajDif3h4/guj9sZnVhHQyqf8F3dtFXlNrWGIkhtwa6bBmQ7WdPU",
	"2aiEM8BiTv4V5erCqrf9qPp8t7b5QJ2MSy04oT6aM1Zn97zHJW/7kfe45AN9BsQeiFUQr8F9rvCeAPcF",
	"FBZBbJ4N6bIEeQHiCYhy6OVWZSrvvXmqRnkdxD1wiw13qRTGvWdvwJ33Zhe9vSV1Zk/emXd/tFDsGMBX",
	"Me9RlZ8Kr27bGWKoyPgthx4D+ZOmNNIAWsa1lY/K5Jw3vaqd08K4HLNTZbCyYZnwQuJCKwffUq59RbNW",
	"Sp74v99f84kui2Nm6RnNl5x2hTHKjgshqgQQ5aCKOuxSZvqQI12iPhn9SiccO7yt3Hvlj9FMNFf63bWW",
	"sibAfQ+FyepCyRckp8PYaivIysx9r7zi74KwsOo7QnmBWAVXgCh/Q0bwNcLDlhKpL+1gr5jUbl690qv5",
	"138pp+KLMbmqcjej1Rfk7lXVKifVTcwxk9C1W2C+UR1Zd7AK5eCj21nMRlF9YymLRmHX5iyLYyHhnub4",
	"/Z85GM3LrUFKc2MBCNWFEojy1329YaRP3UJ+zuit02aOogmt7S802PSnKEJ5l/SU1oNvZ6VS1ZnO1jM3",
	"LD3L05SRn/HnDdtJwms7YXfwQJrSYQU+dXhbtD3xJ4iNWmm7MQh9fiSIIrhT3sOPIN5693dB/ArujJSc",
	"W5IFFKag8EQuSfk8CWIjEH/YDbzx373ySyh8OMznVQq5eqWHy7DlIFJ2sgTioTe7CO609Pn6klEfjBve",
	"/fXq3IQkRi7veyfZeNBS0EAgeOzwSzQ1+o/kGomUFuTVmsqXG2lFvdlWVU+hSAk2j17uU9ytzoM7X9l+",
	"4e3sKF9aOthfa6vKLmtEz5CUZuujGar/K6KrNx3c3FZt7Zd+Hx64To1hzMGdP8yvgHgkt3XIt1pWmFKJ",
	"Ow+FTflRUNgCd18B7DtzQytHznyaJJUM4yeJUMxUl3erC6v+BByu/AZiC/LCGy+FK608zlcW/6hOv6uM",
	"F0HMHObFwf5aMBgnf130tXxadEZZxvU7hBtpYg1p3YxyatCMo51pAHiYXznYXztcLHobxbOfRW6Ikwjk",
	"olnONd62mY+L3V1HG6cemOvP/R0AAP//JRzBIzkOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
