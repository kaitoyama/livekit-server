// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWYU8bRxP+K6d93w+J5GDzJu8XS1WVKGlEU7U0IeJDi5TjvOANvtvL3pqEIkveu0AA",
	"E0EohUCTEJIUHBBOo7QRIRH8mOFs+BfV7p3NGZ+hVfrFOu/NzM4888wzN4oMatrUwhZ3UHoUOUYWm7p6",
	"vE6p2Ut4tltnnBjE1kMTm1EbM05w8O/Y2wx2DEZsTqiF0gi8TfA+gffcHx8DUfFnXH/q+UFxbH+7eLC2",
	"jhKIcGzGRCUZbHHCR+IirsmI7nvwPnVdBve+P/vQn3wIYgPEa5RAfMTGKI0czog1iAoJdJsSC2cu8tZQ",
	"QTYgFkGsVJdcf+IjSqABykydozTK6Byf48TErUELjRPafxsbHB0d6IzpI/I/o9TsypyACIhK1+Xohfk8",
	"ycTexfCdPGE4g9I/1MMmmnHva0lI+hFrgMoEDGpx3VAAWLoprXJkGA8Rfs7BbBgzlEB5lkNplOXcdtLJ",
	"5CDh2Xx/h0HNpE2GdCObT53vTCWPeRUSLaVNqNa8Ae9dbWnnYHU66EroB2IbRKX6ulTdXpWgu3MglsAt",
	"gfcM3FfKbQvcPxU6P4P7QWJBeE7my5n+vWYSg1F5NzGwNkCZFsZFCTSMmRPk0NmR6kjJ1KiNLd0mKI3O",
	"d6Q6zivEeFaRK2lLZNOjaBArUCTxdFmD7BfqJtbgjTouDDs2tZyAlP9LpepwYkt5cnyPJ+2cTqyj2ZFP",
	"+J5u2ipzm1qDMU1twa6bhs128qapsxEJZ4jFrPwVldr8ir/1uPZi52DjobJMSi44kTqaI9Zmdv0nZX/r",
	"sf+kHAB9BsQuiBUQb8B9ofAeB/cleAsgNs5GeFmGogDxFEQlcrhZnSz6b5+paVkDcR/cUmOaq96Y//wt",
	"uHP+zIK/u6hsduWdRfdHCyWOAXwV8+sq81Ph1W07Rwzlmbzt0GMgN6TjvwwPoDT6T/JIypKhjiVjRaxl",
	"XFv7UZ2Y9adWtHNaFJdj8qUETRYsA15IXWjtwbeUa1/RvJWRFv8P6mu26LI4Zpae0wLKaVcYo+w4EeJS",
	"AFEJs6jDLmmmDzpSJeqT0ad4wrHD29K9R76M70Rzpt9da0lrHNwP4E3U5ssBITkdwlZbQlanH/iV5UBu",
	"o8Sqy7DSArECrgBR+YYM42uERyUlll/a/m4prd26eqVHC67/Uk7FF6M3b3ZdLtyKZ18Yu0dlq5RUNzHH",
	"TELXbkcEQnUk3TK+XF/S5k4esxGUqIurTABFVZuzPE5EiHua4vd95mA0r9JGU5oLC0GozZdBVL7u7Yki",
	"feoWCmLGb502cxTf0IO9+UY3gymKYd4lPaNdx3fykqnKprPV5qal53mWMvIT/rxhO4l4bSfsLu7PUjqk",
	"wKcOb4u2L/4AsX5Q3moMQm/gCaIE7qT/6BOId/6DHRC/gDstKeeWZQLeJHhP5ZKUzxMg1kPyR9XAH/vN",
	"r7wC7+NhsahCyNUrNVy6LYWespJFEI/8mQVwp6TO15eM+kBb9x+s1WbHZWPk8r5/koyHJYUFhITHDr9E",
	"MyP/iK6xSGlhXK0pfbmRltXJlsp6EsVSsHn0Cn9H3ep9cOeqWy/97W2lS4v7e6ttWdllDes5ktFsfSRH",
	"9X+FdPWiw5vbsq390u/F/TeoMYQ5uHOHxWUQj+W2juhWywpTLHHnwNuQHwXeJrh7CuBAmRtcOVLm0yip",
	"aJg8iYRiura0U5tfCSbgcPlXEJtQFP5YOZpp9UmxuvB7bep9dawEYvqwKPb3VsPBOPnrorfl06IzTjJu",
	"3CXcyBJrUOtmlFOD5hztTAPAw+Ly/t7q4ULJXy+d/azmRnoSg1x8lwuN0zbzcbG762jj1B0LfYW/AgAA",
	"///LZEd+0A0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
