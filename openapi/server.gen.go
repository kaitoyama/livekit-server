// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// ルームのメタデータを取得
	// (GET /rooms/{roomId}/metadata)
	GetRoomMetadata(ctx echo.Context, roomId openapi_types.UUID) error
	// ルームのメタデータを更新
	// (PATCH /rooms/{roomId}/metadata)
	UpdateRoomMetadata(ctx echo.Context, roomId openapi_types.UUID) error
	// ルームでの発言権限を変更
	// (PATCH /rooms/{roomId}/participants)
	ChangeParticipantRole(ctx echo.Context, roomId openapi_types.UUID) error
	// サウンドボード用の音声一覧を取得
	// (GET /soundboard)
	GetSoundboardList(ctx echo.Context) error
	// サウンドボード用の短い音声ファイルをアップロード
	// (POST /soundboard)
	PostSoundboard(ctx echo.Context) error
	// アップロード済み音声を LiveKit ルームで再生
	// (POST /soundboard/play)
	PostSoundboardPlay(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// GetRoomMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomMetadata(ctx, roomId)
	return err
}

// UpdateRoomMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRoomMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRoomMetadata(ctx, roomId)
	return err
}

// ChangeParticipantRole converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeParticipantRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangeParticipantRole(ctx, roomId)
	return err
}

// GetSoundboardList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundboardList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSoundboardList(ctx)
	return err
}

// PostSoundboard converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboard(ctx)
	return err
}

// PostSoundboardPlay converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboardPlay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboardPlay(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// ------------- Optional query parameter "isWebinar" -------------

	err = runtime.BindQueryParameter("form", true, false, "isWebinar", ctx.QueryParams(), &params.IsWebinar)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isWebinar: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/rooms/:roomId/metadata", wrapper.GetRoomMetadata)
	router.PATCH(baseURL+"/rooms/:roomId/metadata", wrapper.UpdateRoomMetadata)
	router.PATCH(baseURL+"/rooms/:roomId/participants", wrapper.ChangeParticipantRole)
	router.GET(baseURL+"/soundboard", wrapper.GetSoundboardList)
	router.POST(baseURL+"/soundboard", wrapper.PostSoundboard)
	router.POST(baseURL+"/soundboard/play", wrapper.PostSoundboardPlay)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
