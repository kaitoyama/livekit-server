// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
