// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// ルームのメタデータを取得
	// (GET /rooms/{roomId}/metadata)
	GetRoomMetadata(ctx echo.Context, roomId openapi_types.UUID) error
	// ルームのメタデータを更新
	// (PATCH /rooms/{roomId}/metadata)
	UpdateRoomMetadata(ctx echo.Context, roomId openapi_types.UUID) error
	// ルームでの発言権限を変更
	// (PATCH /rooms/{roomId}/participants)
	ChangeParticipantRole(ctx echo.Context, roomId openapi_types.UUID) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// GetRoomMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomMetadata(ctx, roomId)
	return err
}

// UpdateRoomMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRoomMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRoomMetadata(ctx, roomId)
	return err
}

// ChangeParticipantRole converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeParticipantRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangeParticipantRole(ctx, roomId)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// ------------- Optional query parameter "isWebinar" -------------

	err = runtime.BindQueryParameter("form", true, false, "isWebinar", ctx.QueryParams(), &params.IsWebinar)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isWebinar: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/rooms/:roomId/metadata", wrapper.GetRoomMetadata)
	router.PATCH(baseURL+"/rooms/:roomId/metadata", wrapper.UpdateRoomMetadata)
	router.PATCH(baseURL+"/rooms/:roomId/participants", wrapper.ChangeParticipantRole)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
