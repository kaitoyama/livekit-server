// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RVYU/bRhj+K9ZtHzbJxGEwrbI0TZ3oqqzTxhioHzakXp0jOYjvzPmclaFInF0YLUUg",
	"hmiZukLZxCiIdNW0ibKK/ZirE/YvpjsnkMSmfOiXKLbfe+59n/d5n3cWONT1KEGE+8CeBb5TRi7Uf0co",
	"dW9iXh6GjGMHe7AV4jHqIcYxSp56vhaR7zDscUwJsIGMDmT0Skbb8cK8FPV4JYzvb5/Ozb8+mjvd/R2Y",
	"AHPkZqDiIiIc85ksxF2FGP4to1eFIRnejVeX43vLUuxL8QyYgM94CNjA5wyTEqiZYJJigopXeRoqyUaK",
	"h1JsNTbDePEfYIIJylzIgQ2KkKM+jl2UBq2dvaG3J5HDwfkLyBicUc+MUrdQfAMjUtQLQ50XBgEuZt7F",
	"0HSAGSoC+9s2rNnN+3gqIXUOkwmqEnAo4dDRBBDoqqgKrqIpzPt8xKqIARMErAJsUObc823LKmFeDm7n",
	"HOpaHp6CTjnID/TnrZ5TNTNV2qJuzXMZ/dncPD59+iDpSuucFEdS1BvPlhpHTxXp4ZoUmzJcktETGf6m",
	"jx3K8C/Nzk8yfKm4wLyi8uUMfm242GFU3Y0dZExQZrRwgQmqiPlJDv25fC6vUqMeItDDwAYDuXxuQDPG",
	"y1pclqeYtWdBCWlSlPCgqkH1CwxjUvqmzQtDvkeJn4jyg3y+TSci+iRHd7jlVSAm57Oj/qE70PV05h4l",
	"pYymprgbpq1m+4HrQjaj6Gxxsap+Rb25vhUfPmruHJ/uL+tIS2nB76ijG7G5chI/3osPH8WP9xKi35Pi",
	"RIotKZ7LcEfzvSDDX2W0IcX++x263JNzQopfpKh3vDxo3JuLXzzR07IrxV0ZLp1NcyOaj7dfyHAtXtmI",
	"Tx7qmBN151z4HQFmD8HXER/RmV9KL/S8Cnb0SWvSpz0kn1nHuwxNABu8Y51bmdXyMSvTxFLjmu5HY3E1",
	"vr9l9BmdvPTYlzY0VbACHMwPpnvwJeXGZzQgRRXxYVJfd0SBcMQIrBiJ5IxrjFHWK4SsFKSot7Jo065k",
	"Bku+con2ZIxrnXDk8wvlPqo+ZneiO9OvbqTSWpDhSxktNtf3EkFyOoXIhYJsPPgxrv+c2G2nsNo2rL1A",
	"bMlQSFH/AlfRDcw7LSVTX8brkyXbuHX92qiRXP+JmoqPZ8fGCkO1W9nqa2GP6my1k0IXccQUdRftiMSo",
	"zq1b4av1pWKmA8RmgNk2V5UA6HRtzgJkdgj3Mscff8vB6F6lZ03pLqxFQnN9T4r65zdHO5m+dAslmNlb",
	"54I5ym7o6b/rZ91MpihDeZ/CojGCpgOlVB3Tn44ZIzDgZcrwD+jthu1NwsueMHVc42XpR+00hXMgo4Pm",
	"2h/xTtS1bW3LqlAHVsrU5/aV/JW8pXZWzeyF+W9jqbl5nAGg1vXg4OBHfUVUzXEGp/s8hqoYfa8ePI5z",
	"HDlloCTVyvwCHVwdLpwruF1cbbz2fwAAAP//KYQbWSAKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
