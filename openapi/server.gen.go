// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// ルームのメタデータを取得
	// (GET /rooms/{roomId}/metadata)
	GetRoomMetadata(ctx echo.Context, roomId openapi_types.UUID) error
	// ルームのメタデータを更新
	// (PATCH /rooms/{roomId}/metadata)
	UpdateRoomMetadata(ctx echo.Context, roomId openapi_types.UUID) error
	// ルームでの発言権限を変更
	// (PATCH /rooms/{roomId}/participants)
	ChangeParticipantRole(ctx echo.Context, roomId openapi_types.UUID) error
	// サウンドボード用の音声一覧を取得
	// (GET /soundboard)
	GetSoundboardList(ctx echo.Context) error
	// サウンドボード用の短い音声ファイルをアップロード
	// (POST /soundboard)
	PostSoundboard(ctx echo.Context) error
	// アップロード済み音声を LiveKit ルームで再生
	// (POST /soundboard/play)
	PostSoundboardPlay(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// GetRoomMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomMetadata(ctx, roomId)
	return err
}

// UpdateRoomMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRoomMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRoomMetadata(ctx, roomId)
	return err
}

// ChangeParticipantRole converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeParticipantRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangeParticipantRole(ctx, roomId)
	return err
}

// GetSoundboardList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundboardList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSoundboardList(ctx)
	return err
}

// PostSoundboard converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboard(ctx)
	return err
}

// PostSoundboardPlay converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboardPlay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboardPlay(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// ------------- Optional query parameter "isWebinar" -------------

	err = runtime.BindQueryParameter("form", true, false, "isWebinar", ctx.QueryParams(), &params.IsWebinar)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isWebinar: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/rooms/:roomId/metadata", wrapper.GetRoomMetadata)
	router.PATCH(baseURL+"/rooms/:roomId/metadata", wrapper.UpdateRoomMetadata)
	router.PATCH(baseURL+"/rooms/:roomId/participants", wrapper.ChangeParticipantRole)
	router.GET(baseURL+"/soundboard", wrapper.GetSoundboardList)
	router.POST(baseURL+"/soundboard", wrapper.PostSoundboard)
	router.POST(baseURL+"/soundboard/play", wrapper.PostSoundboardPlay)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"04e9PW7+cBaO3hv9bwAAAP//qZuVQOYrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
