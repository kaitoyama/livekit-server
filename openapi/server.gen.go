// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// サウンドボード用の音声一覧を取得
	// (GET /soundboard)
	GetSoundboardList(ctx echo.Context) error
	// サウンドボード用の短い音声ファイルをアップロード
	// (POST /soundboard)
	PostSoundboard(ctx echo.Context) error
	// アップロード済み音声を LiveKit ルームで再生
	// (POST /soundboard/play)
	PostSoundboardPlay(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
	// LiveKit Webhook受信
	// (POST /webhook)
	LiveKitWebhook(ctx echo.Context) error
	// WebSocketエンドポイント
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// GetSoundboardList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundboardList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSoundboardList(ctx)
	return err
}

// PostSoundboard converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboard(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboard(ctx)
	return err
}

// PostSoundboardPlay converts echo context to params.
func (w *ServerInterfaceWrapper) PostSoundboardPlay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSoundboardPlay(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// ------------- Optional query parameter "isWebinar" -------------

	err = runtime.BindQueryParameter("form", true, false, "isWebinar", ctx.QueryParams(), &params.IsWebinar)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isWebinar: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// LiveKitWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LiveKitWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LiveKitWebhook(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/soundboard", wrapper.GetSoundboardList)
	router.POST(baseURL+"/soundboard", wrapper.PostSoundboard)
	router.POST(baseURL+"/soundboard/play", wrapper.PostSoundboardPlay)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)
	router.POST(baseURL+"/webhook", wrapper.LiveKitWebhook)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
