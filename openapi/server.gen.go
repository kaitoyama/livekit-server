// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/pikachu0310/livekit-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// ルームと参加者の一覧を取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// LiveKitトークンを取得
	// (GET /token)
	GetLiveKitToken(ctx echo.Context, params GetLiveKitTokenParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetLiveKitToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetLiveKitToken(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLiveKitTokenParams
	// ------------- Required query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, true, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLiveKitToken(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/token", wrapper.GetLiveKitToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RVXW/bNhT9KwK3hw1QI2fpXgQMQ4d0hddhy7IEfdgClJUZm4lFKhQVNAsMhHKTpU2D",
	"BF3QNkNXp92QuSniohg2pF3h/RhWtn/GQMofsiU3D30RJOrey8Nzzz1cBw51PUoQ4T6w14HvlJAL9ess",
	"pe41zEszkHHsYA92QzxGPcQ4RvHXyN8C8h2GPY4pATaQ1eey+kZWj6KtTSka0V4Y3TnqbGy+PdvoHP8J",
	"TIA5cjOq4gIiHPO1rIrHqmL4j6y+yU/L8Fa0vxvd3pXiRIpnwAR8zUPABj5nmBRBxQRLFBNUuMTTpWI0",
	"UjyQotY6DKPtf4EJFilzIQc2KECOLnDsonTRSn+F3lhCDgeDBcgYXFPfjFI3X3gHI1I08tPJDYMAFzL3",
	"YmglwAwVgP1Dr6w5zPtCCpDKw2SRKgAOJRw6mgACXRVVxqtoGfMLPmKriAETBKwMbFDi3PNtyypiXgpu",
	"TDjUtTy8DJ1SkJuazFkjWRUzdbRt3ZoXsvpX+/B158nduCvdPCnOpGi0nu20zp4o0sN7UhzKcEdWH8vw",
	"D512KsO/NTu/yPCV4gLzssLLGfzOcLHDqNobO8hYpMzo1gUmWEXMjzFMTuQmcgoa9RCBHgY2mJrITUxp",
	"xnhJi8vyFLP2OigiTYoSHlRnUP0CM5gUv+/xwpDvUeLHovwkl+vRiYjO5Ogmt7wyxGQwO+oN3YSup5F7",
	"lBQzmpriboZ2m+0HrgvZmqKzy8W+eopG+6AWnT5sP33dOdnVkZbSgp84x3DF9l4zelSPTh9Gj+ox0R9J",
	"0ZSiJsULGT7VfG/J8HdZvS/FyccJXdblhpDiNykaicXnrdsb0cvHelqOpbglw53+NLeqm9HRSxnei/bu",
	"R80HOqap9twIfyTAHCH4CuKzGvm59ELPK2NHZ1pLPh0huW8dHzK0CGzwgTWwMqvrY1amiaXGNd2P1vZ+",
	"dKdmXDCSvIzYlzY0dWBV8GLuYroH31BufEkDUlARn8bnG47IE44YgWUjlpxxmTHKRoWQBUGKRhdFj3Yl",
	"M1j0lUv0JmNB64Qjn4+V+5z6md2JYaTfXk3B2pLhK1ndbh/UY0FyuozIWEG27v4cNX6N7TYprJ4Nay8Q",
	"NRkKKRpf41V0FfOkpWTqy3jb3LGN61cuzxnx9p+rqfhsfX4+P125nq2+bu05jVY7KXQRR0xRN+6OiI1q",
	"YN2qvrq+VMxKgNgaMHvmqgCApGtzFiAzIdzzHH/hPQdj+CrtN2X4YF0S2gd1KRpfXZtLMn3uLRTXzL51",
	"xsxRdkM7/x30uxlPUYbyvoAFYxatBEqpOmYyHTNPYMBLlOGf0PsN27uElz1hlf7qGI4vzeQH6uglVhYq",
	"/wcAAP//k4NOjXwJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
